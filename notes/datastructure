
Linked List
1. Linked List Insertion.
2. Linked List Deletion.
3. To count a number of times a given integer occured in a node.
4. Reverse a linked list.
5. Detect a loop in linked list
6. Middle of a given linked list
7. To check if the singly linked list is a palindrome or not.
8.  



########################################################
01. Introduction to Data Structures
########################################################
--> A data structure is a way to store and organize data in a computer,	so 
that it can be used efficiently.

When we talk about data structures as 
--> Mathematical/Logical model or abstract data type
--> Implementation

Abstract data types
--> Defines data and operations but no implementation
Eg : Arrays, Linked Lists, Stacks, Queues, Trees, Graphs.

########################################################
02. Data Structure List as Abstract Data Types
########################################################




########################################################
03. Introduction to linked list
########################################################


########################################################
04 Data Structures Arrays vs Linked Lists
########################################################



########################################################
05 Linked List - Implementation in C-C++  
########################################################



########################################################
06 Linked List in C-C++ - Inserting a node at beginning
########################################################


########################################################
07 Linked List in C-C++ - Insert a node at nth position
########################################################


########################################################
08 Linked List in C-C++ - Delete a node at nth position
########################################################


########################################################
09 Reverse a linked list - Iterative method
########################################################


########################################################
10 Print elements of a linked list in forward and 
reverse order using recursion
########################################################


########################################################
11 Reverse a linked list using recursion
########################################################


########################################################
12 Data structures Introduction to Doubly Linked List
########################################################


########################################################
13 Doubly Linked List - Implementation in C-C++  
########################################################


########################################################
14 Data structures Introduction to stack
########################################################


########################################################
15 Data structures Array implementation of stacks
########################################################


########################################################
16 Data Structures Linked List implementation of stacks
########################################################


########################################################
17 Reverse a string or linked list using stack.
########################################################


########################################################
18 Check for balanced parentheses using stack
########################################################


########################################################
19 Infix, Prefix and Postfix
########################################################


########################################################
20 Evaluation of Prefix and Postfix expressions using stack
########################################################


########################################################
21 Infix to Postfix using stack
########################################################


########################################################
22 Data structures Introduction to Queues
########################################################


########################################################
23 Data structures Array implementation of Queue
########################################################


########################################################
24 Data structures Linked List implementation of Queue
########################################################


########################################################
25 Data structures Introduction to Trees
########################################################


########################################################
26 Data structures Binary Tree
########################################################


########################################################
27 Data structures Binary Search Tree
########################################################


########################################################
28 Binary search tree - Implementation in C-C++
########################################################


########################################################
29 BST implementation -  memory allocation in stack and heap
########################################################



########################################################
30 Find min and max element in a binary search tree
########################################################



########################################################
31 Find height of a binary tree
########################################################



########################################################
32 Binary tree traversal - breadth-first and depth-first strategies
########################################################



########################################################
33 Binary tree Level Order Traversal
########################################################



########################################################
34 Binary tree traversal Preorder, Inorder, Postorder
########################################################



########################################################
35 Check if a binary tree is binary search tree or not
########################################################



########################################################
36 Delete a node from Binary Search Tree
########################################################



########################################################
37 Inorder Successor in a binary search tree
########################################################




########################################################
38 Data structures Introduction to graphs
########################################################



########################################################
39 Data structures Properties of Graphs
########################################################




########################################################
40 Graph Representation part 01 - Edge List
########################################################




########################################################
41 Graph Representation part 02 - Adjacency Matrix
########################################################



########################################################
GeeksforGeeks - Singly Linked List
########################################################

    Introduction to Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Linked List vs Array
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Linked List Insertion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Linked List Deletion (Deleting a given key)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Linked List Deletion (Deleting a key at given position)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    A Programmerâ€™s approach of looking at Array vs. Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find Length of a Linked List (Iterative and Recursive)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Search an element in a Linked List (Iterative and Recursive)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    How to write C functions that modify head pointer of a Linked List?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Swap nodes in a linked list without swapping data
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Write a function to get Nth node in a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Given only a pointer to a node to be deleted in a singly linked list, how do you delete it?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Print the middle of a given linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Nth node from the end of a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Write a function to delete a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Write a function that counts the number of times a given int occurs in a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Reverse a linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Detect loop in a linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Function to check if a singly linked list is palindrome
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Given a linked list which is sorted, how will you insert in sorted way
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Intersection point of two Linked Lists.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Recursive function to print reverse of a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Remove duplicates from a sorted linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Remove duplicates from an unsorted linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Pairwise swap elements of a given linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Practice questions for Linked List and Recursion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Move last element to front of a given Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Intersection of two Sorted Linked Lists
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Delete alternate nodes of a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Alternating split of a given Singly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Merge two sorted linked lists
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Identical Linked Lists
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Merge Sort for Linked Lists
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Reverse a Linked List in groups of given size
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Reverse alternate K nodes in a Singly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Delete nodes which have a greater value on right side
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Segregate even and odd nodes in a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Detect and Remove Loop in a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Add two numbers represented by linked lists | Set 1
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Delete a given node in Linked List under given constraints
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Union and Intersection of two Linked Lists
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find a triplet from three linked lists with sum equal to a given number
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Rotate a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Flattening a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Add two numbers represented by linked lists | Set 2
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sort a linked list of 0s, 1s and 2s
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Flatten a multilevel linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Delete N nodes after M nodes of a linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    QuickSort on Singly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Merge a linked list into another linked list at alternate positions
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Pairwise swap elements of a given linked list by changing links
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Given a linked list of line segments, remove middle points
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Construct a Maximum Sum Linked List out of two Sorted Linked Lists having some Common nodes
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Can we reverse a linked list in less than O(n)?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Clone a linked list with next and random pointer | Set 2
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Insertion Sort for Singly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Point to next higher value node in a linked list with an arbitrary pointer
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Rearrange a given linked list in-place.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sort a linked list that is sorted alternating ascending and descending orders?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Select a Random Node from a Singly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Why Quick Sort preferred for Arrays and Merge Sort for Linked Lists?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Generic Linked List in C
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Circular Linked List
########################################################

    Circular Linked List Introduction and Applications,
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Circular Linked List Traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Split a Circular Linked List into two halves
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sorted insert for circular linked list
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Doubly Linked List
########################################################

    Doubly Linked List Introduction and Insertion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Delete a node in a Doubly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Reverse a Doubly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    The Great Tree-List Recursion Problem.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Copy a linked list with next and arbit pointer
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    QuickSort on Doubly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Swap Kth node from beginning with Kth node from end in a Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Merge Sort for Doubly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Stack
########################################################

    Introduction to Stack
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Infix to Postfix Conversion using Stack
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Evaluation of Postfix Expression
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Reverse a String using Stack
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Implement two stacks in an array
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check for balanced parentheses in an expression
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Next Greater Element
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Reverse a stack using recursion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sort a stack using recursion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    The Stock Span Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Design and Implement Special Stack Data Structure
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Implement Stack using Queues
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Design a stack with operations on middle element
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    How to create mergable stack?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    How to efficiently implement k stacks in a single array?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Iterative Tower of Hanoi
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Length of the longest valid substring
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find maximum of minimum for every window size in a given array
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Queue
########################################################

    Queue Introduction and Array Implementation
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Linked List Implementation of Queue
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Applications of Queue Data Structure
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Priority Queue Introduction
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Deque (Introduction and Applications)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Implement Queue using Stacks
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check whether a given Binary Tree is Complete or not
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find the largest multiple of 3
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find the first circular tour that visits all petrol pumps
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Maximum of all subarrays of size k
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    An I nteresting Method to Generate Binary Numbers from 1 to n
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    How to efficiently implement k Queues in a single array?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Binary Tree
########################################################
Binary Tree structure :
struct node {
 int data;
 struct node *left;
 struct node *right;
};
-------------------------------------------------------------------
Create a binary tree node :
struct node *newNode(int data) {
 struct node *node = (struct node*) malloc (sizeof(struct node));
 node->data = data;
 node->left = NULL;
 node->right = NULL;
 return node;
}
-------------------------------------------------------------------
****************************************************************************
1. Depth First Traversals
****************************************************************************
(a) Inorder
(b) Preorder
(c) Postorder

-------------------------------------------------------------------
(a) Inorder Traversal:
Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
Code :
 void printInorder(struct node *node) {
  if (node == NULL)
  return;
  
  printInorder(node->left);
  printf("%d \t",node->data);
  printInorder(node->right);
 }
Time Complexity: O(n)
------------------------------------------------------------------- 
(b) Preorder Traversal:
Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)
Code :
void printPreorder(struct node *node) {
 if(node == NULL)
 return;
 
 printf("%d \t",node->data);
 printPreorder(node->left);
 printPreorder(node->right);
}
Time Complexity: O(n)
-------------------------------------------------------------------

(c) Postorder Traversal:
Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.
Code :
 void printPostorder(struct node *node) {
  if (node == NULL)
   return ;
   
  printPostorder(node->left);
  printPostorder(node->right);
  printf("%d \t",node->data);
 }
Time Complexity: O(n)
****************************************************************************
2. Size of Binary Tree
****************************************************************************
Algorithm:
size(tree)
1. If tree is empty then return 0
2. Else
     (a) Get the size of left subtree recursively  i.e., call 
          size( tree->left-subtree)
     (a) Get the size of right subtree recursively  i.e., call 
          size( tree->right-subtree)
     (c) Calculate size of the tree as following:
            tree_size  =  size(left-subtree) + size(right-
                               subtree) + 1
     (d) Return tree_size
Code :
int size(struct node *node) {
 if (node == NULL)
  return 0;
 else
  return(size(node->left) + 1 + size(node->right));
}
Time Complexity: O(n)

****************************************************************************
3. Detemine if two tree are identical
****************************************************************************
Algorithm:
sameTree(tree1, tree2)
1. If both trees are empty then return 1.
2. Else If both trees are non -empty
     (a) Check data of the root nodes (tree1->data ==  tree2->data)
     (b) Check left subtrees recursively  i.e., call sameTree( 
          tree1->left_subtree, tree2->left_subtree)
     (c) Check right subtrees recursively  i.e., call sameTree( 
          tree1->right_subtree, tree2->right_subtree)
     (d) If a,b and c are true then return 1.
3  Else return 0 (one is empty and other is not)
Code :
/* Given two trees, return true if they are
 structurally identical */
int identicalTrees(struct node* a, struct node* b)
{
    /*1. both empty */
    if (a==NULL && b==NULL)
        return 1;
 
    /* 2. both non-empty -> compare them */
    if (a!=NULL && b!=NULL)
    {
        return
        (
            a->data == b->data &&
            identicalTrees(a->left, b->left) &&
            identicalTrees(a->right, b->right)
        );
    }
    
    /* 3. one empty, one not -> false */
    return 0;
}
Time Complexity : O(m) where m < n. where number of nodes 
in two trees be m and n
****************************************************************************
4. Maximum Depth or Height of a Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------
****************************************************************************
5. Write a C program to Delete a Tree.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------


****************************************************************************
6. Write an Efficient C Function to Convert a Binary Tree into its Mirror Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
7. If you are given two traversal sequences, can you construct the binary tree?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
8. Given a binary tree, print out all of its root-to-leaf paths one per line.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------






****************************************************************************
9. The Great Tree-List Recursion Problem.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------





****************************************************************************
10. Level Order Tree Traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------






****************************************************************************
11. Count leaf nodes in a binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
12. Level order traversal in spiral form
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
13. Check for Children Sum Property in a Binary Tree.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
14. Convert an arbitrary Binary Tree to a tree that holds Children Sum Property
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
15. Diameter of a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
16. How to determine if a binary tree is height-balanced?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
17. Inorder Tree Traversal without Recursion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
18. Inorder Tree Traversal without recursion and without stack!
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
19. Root to leaf path sum equal to a given number
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
20. Construct Tree from given Inorder and Preorder traversals
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
21. Given a binary tree, print all root-to-leaf paths
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
22. Double Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
23. Maximum width of a binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
24. Foldable Binary Trees
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
25. Print nodes at k distance from root
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
26. Get Level of a node in a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
27. Print Ancestors of a given node in Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
28. Check if a given Binary Tree is SumTree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
29. Check if a binary tree is subtree of another binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
30. Connect nodes at same level
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
31. Connect nodes at same level using constant extra space
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
32. Populate Inorder Successor for all nodes
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
33. Convert a given tree to its Sum Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
34. Vertical Sum in a given Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
35. Find the maximum sum leaf to root path in a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
36. Construct Special Binary Tree from given Inorder traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
37. Construct a special tree from given preorder traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
38. Check whether a given Binary Tree is Complete or not
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
39. Boundary Traversal of binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
40. Construct Full Binary Tree from given preorder and postorder traversals
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
41. Iterative Preorder Traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
42. Morris traversal for Preorder
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
43. Linked complete binary tree & its creation
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
44. Ternary Search Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
45. Segment Tree | Set 1 (Sum of given range)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
46. Largest Independent Set Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Iterative Postorder Traversal | Set 2 (Using One Stack)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Reverse Level Order Traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Construct Complete Binary Tree from its Linked List Representation
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Convert a given Binary Tree to Doubly Linked List | Set 1

****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Tree Isomorphism Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find all possible interpretations of an array of digits
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Iterative Method to find Height of Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Custom Tree Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Convert a given Binary Tree to Doubly Linked List | Set 2
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print ancestors of a given binary tree node without recursion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Difference between sums of odd level and even level nodes of a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print Postorder traversal from given Inorder and Preorder traversals
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find depth of the deepest odd level leaf node
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Check if all leaves are at same level
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print Left View of a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Remove all nodes which donâ€™t lie in any path with sum>= k
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Extract Leaves of a Binary Tree in a Doubly Linked List
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Deepest left leaf node in a binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find next right node of a given key
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Sum of all the numbers that are formed from root to leaf paths
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Convert a given Binary Tree to Doubly Linked List | Set 3
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Lowest Common Ancestor in a Binary Tree | Set 1
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find distance between two given keys of a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print all nodes that are at distance k from a leaf node
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Check if a given Binary Tree is height balanced like a Red-Black Tree,
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print all nodes at distance k from a given node
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print a Binary Tree in Vertical Order | Set 1
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Construct a tree from Inorder and Level order traversals
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find the maximum path sum between two leaves of a binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Reverse alternate levels of a perfect binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Check if two nodes are cousins in a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Check if a binary tree is subtree of another binary tree | Set 2
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Serialize and Deserialize a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print nodes between two given level numbers of a binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
closest leaf in a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Convert a Binary Tree to Threaded binary tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print Nodes in Top View of Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Bottom View of a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Perfect Binary Tree Specific Level Order Traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Convert left-right representation of a bianry tree to down-right
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Print level order traversal line by line
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Minimum no. of iterations to pass information to all nodes in the tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Clone a Binary Tree with Random Pointers
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Given a binary tree, how do you remove all the half nodes?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Check whether a binary tree is a full binary tree or not
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find sum of all left leaves in a given Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Remove nodes on root to leaf paths of length < K
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Iterative Search for a key â€˜xâ€™ in Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Find maximum (or minimum) in Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************
Maximum Path Sum in a Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************


########################################################
GeeksforGeeks - Binary Search Tree
########################################################
Search and Insert in BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



**************************************************************************** 
    Deletion from BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Minimum value in a Binary Search Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Inorder predecessor and successor for a given key in BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check if a binary tree is BST or not
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Lowest Common Ancestor in a Binary Search Tree.
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sorted order printing of a given array that represents a BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Inorder Successor in Binary Search Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find k-th smallest element in BST (Order Statistics in BST)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Kâ€™th smallest element in BST using O(1) Extra Space
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Print BST keys in the given range
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sorted Array to Balanced BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find the largest BST subtree in a given Binary Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check for Identical BSTs without building the trees
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Add all greater values to every node in a given BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Remove BST keys outside the given range
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check if each internal node of a BST has exactly one child
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find if there is a triplet in a Balanced BST that adds to zero
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Merge two BSTs with limited extra space
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Two nodes of a BST are swapped, correct the BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Construct BST from given preorder traversal | Set 1
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Construct BST from given preorder traversal | Set 2
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Floor and Ceil from a BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Convert a BST to a Binary Tree such that sum of all greater keys is added to every key
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sorted Linked List to Balanced BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    In-place conversion of Sorted DLL to Balanced BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find a pair with given sum in a Balanced BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Total number of possible Binary Search Trees with n keys
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Merge Two Balanced Binary Search Trees
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Binary Tree to Binary Search Tree Conversion
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Transform a BST to greater sum tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Inorder predecessor and successor for a given key in BST
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Kâ€™th Largest Element in BST when modification to BST is not allowed
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    How to handle duplicates in Binary Search Tree?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Print Common Nodes in Two Binary Search Trees
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Construct all possible BSTs for keys 1 to N
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    


########################################################
GeeksforGeeks - Heap
########################################################

    Binary Heap
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Why is Binary Heap Preferred over BST for Priority Queue?
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Binomial Heap
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Fibonacci Heap
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Heap Sort
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Kâ€™th Largest Element in an array
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Sort an almost sorted array/
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Tournament Tree (Winner Tree) and Binary Heap
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Hashing
########################################################

    Hashing Introduction
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Separate Chaining for Collision Handling
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Open Addressing for Collision Handling
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Print a Binary Tree in Vertical Order
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find whether an array is subset of another array
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Union and Intersection of two Linked Lists
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find a pair with given sum
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check if a given array contains duplicate elements within k distance from each other
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find Itinerary from a given list of tickets
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find number of Employees Under every Employee
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    


########################################################
GeeksforGeeks - Graphs
########################################################

    Graph and its representations
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Breadth First Traversal for a Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Depth First Traversal for a Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Applications of Depth First Search
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Applications of Breadth First Traversal
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Detect Cycle in a Directed Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Detect Cycle in a an Undirected Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Detect cycle in an undirected graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Longest Path in a Directed Acyclic Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Topological Sorting
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check whether a given graph is Bipartite or not
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Snake and Ladder Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Minimize Cash Flow among a given set of friends who have borrowed money from each other
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Boggle (Find all possible words in a board of characters)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Assign directions to edges so that the directed graph remains acyclic
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Primâ€™s Minimum Spanning Tree (MST))
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Applications of Minimum Spanning Tree Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Primâ€™s MST for Adjacency List Representation
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Kruskalâ€™s Minimum Spanning Tree Algorithm
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Boruvkaâ€™s algorithm for Minimum Spanning Tree
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Dijkstraâ€™s shortest path algorithm
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Dijkstraâ€™s Algorithm for Adjacency List Representation
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Bellmanâ€“Ford Algorithm
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Floyd Warshall Algorithm
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Johnsonâ€™s algorithm for All-pairs shortest paths
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Shortest Path in Directed Acyclic Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Some interesting shortest path questions,
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Shortest path with exactly k edges in a directed and weighted graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
   Find if there is a path between two vertices in a directed graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************   
    Connectivity in a directed graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Articulation Points (or Cut Vertices) in a Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Biconnected graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Bridges in a graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Eulerian path and circuit
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Fleuryâ€™s Algorithm for printing Eulerian Path or Circuit
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Strongly Connected Components
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Transitive closure of a graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find the number of islands
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Count all possible walks from a source to a destination with exactly k edges
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Euler Circuit in a Directed Graph
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Biconnected Components
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Check if a given graph is tree or not
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Kargerâ€™s algorithm for Minimum Cut 
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Graph Coloring (Introduction and Applications)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Greedy Algorithm for Graph Coloring
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Travelling Salesman Problem (Naive and Dynamic Programming)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Travelling Salesman Problem (Approximate using MST)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Hamiltonian Cycle
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Vertex Cover Problem | Set 1 (Introduction and Approximate Algorithm)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    K Centers Problem | Set 1 (Greedy Approximate Algorithm)
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Ford-Fulkerson Algorithm for Maximum Flow Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find maximum number of edge disjoint paths between two vertices
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Find minimum s-t cut in a flow network
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Maximum Bipartite Matching
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    
    Channel Assignment Problem
****************************************************************************
Algorithm :
----------------------------------------------------------------------------
Code :
----------------------------------------------------------------------------



****************************************************************************    

########################################################
GeeksforGeeks - Advanced Data Structure
########################################################


########################################################
GeeksforGeeks - Array
########################################################


########################################################
GeeksforGeeks - Matrix
########################################################


########################################################
GeeksforGeeks - Searching and Sorting
########################################################
1. Binary Search
Algorithm :
The idea of binary search is to use the information 
that the array is sorted and reduce the time complexity 
to O(Logn). We basically ignore half of the 
elements just after one comparison.
1) Compare x with the middle element.
2) If x matches with middle element, we return the mid index.
3) Else If x is greater than the mid element, 
then x can only lie in right half subarray after 
the mid element. So we recur for right half.
4) Else (x is smaller) recur for the left half.


A. Recursive C implementation of Binary Search
Code :
int binarySearch(int arr[], int l, int r, int x)
{
   if (r >= l)
   {
        int mid = l + (r - l)/2;
        if (arr[mid] == x)  return mid;
        if (arr[mid] > x) return binarySearch(arr, l, mid-1, x);
        return binarySearch(arr, mid+1, r, x);
   }
   return -1;
}
 
int main(void)
{
   int arr[] = {2, 3, 4, 10, 40};
   int n = sizeof(arr)/ sizeof(arr[0]);
   int x = 10;
   int result = binarySearch(arr, 0, n-1, x);
   (result == -1)? printf("Element is not present in array")
                 : printf("Element is present at index %d", result);
   return 0;
}

B. Iterative C implementation of Binary Search.
Code :
#include <stdio.h>
int binarySearch(int arr[], int l, int r, int x)
{
  while (l <= r)
  {
    int m = l + (r-l)/2;
 
    if (arr[m] == x) return m;  // Check if x is present at mid
 
    if (arr[m] < x) l = m + 1; // If x greater, ignore left half
 
    else r = m - 1; // If x is smaller, ignore right half
  }
  return -1; // if we reach here, then element was not present
}
 
int main(void)
{
   int arr[] = {2, 3, 4, 10, 40};
   int n = sizeof(arr)/ sizeof(arr[0]);
   int x = 10;
   int result = binarySearch(arr, 0, n-1, x);
   (result == -1)? printf("Element is not present in array")
                 : printf("Element is present at index %d", result);
   return 0;
}

Time Complexity :  O(Logn)
--------------------------------------------------------
2. Selection Sort
Algorithm :
The selection sort algorithm sorts an array by repeatedly 
finding the minimum element (considering ascending order) 
from unsorted part and putting it at the beginning.

Code :
#include <stdio.h>
 
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void selectionSort(int arr[], int n)
{
    int i, j, min_idx;
    
    for (i = 0; i < n-1; i++)
    {
        min_idx = i;
        for (j = i+1; j < n; j++)
          if (arr[j] < arr[min_idx])
            min_idx = j;
            
        swap(&arr[min_idx], &arr[i]);
    }
}

void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 
int main()
{
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr)/sizeof(arr[0]);
    selectionSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}

Time Complexity: O(n*n) as there are two nested loops.

Auxiliary Space: O(1)
--------------------------------------------------------
3. Bubble Sort
Algorithm :
Bubble Sort is the simplest sorting algorithm that 
works by repeatedly swapping the adjacent elements 
if they are in wrong order.

Code :
#include <stdio.h>

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort(int arr[], int n)
{
   int i, j;
   for (i = 0; i < n; i++)      
       for (j = 0; j < n-i-1; j++) //Last i elements are already in place  
           if (arr[j] > arr[j+1])
              swap(&arr[j], &arr[j+1]);
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}

Optimized Implementation:
#include <stdio.h>

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort(int arr[], int n)
{
   int i, j;
   bool swapped;
   for (i = 0; i < n; i++)
   {
     swapped = false;
     for (j = 0; j < n-i-1; j++)
     {
        if (arr[j] > arr[j+1])
        {
           swap(&arr[j], &arr[j+1]);
           swapped = true;
        }
     }
     if (swapped == false)
        break;
   }
}

void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}

Time Complexity: O(n*n)

Auxiliary Space: O(1)

Boundary Cases: Bubble sort takes minimum time (Order of n)
when elements are already sorted.

Sorting In Place: Yes

Stable: Yes

--------------------------------------------------------
4. Insertion Sort

--------------------------------------------------------
5. Merge Sort
Algorithm :
MergeSort(arr[], l,  r)
If r > l
     1. Find the middle point to divide the array into two halves:  
             middle m = (l+r)/2
     2. Call mergeSort for first half:   
             Call mergeSort(arr, l, m)
     3. Call mergeSort for second half:
             Call mergeSort(arr, m+1, r)
     4. Merge the two halves sorted in step 2 and 3:
             Call merge(arr, l, m, r)

Code :
/* C program for merge sort */
#include<stdlib.h>
#include<stdio.h>
 
/* Function to merge the two haves arr[l..m] and arr[m+1..r] of array arr[] */
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    /* create temp arrays */
    int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the sub-array
  of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
 
 
/* UITLITY FUNCTIONS */
/* Function to print an array */
void printArray(int A[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}
 
/* Driver program to test above functions */
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
 
    printf("Given array is \n");
    printArray(arr, arr_size);
 
    mergeSort(arr, 0, arr_size - 1);
 
    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}
Time Complexity : O(nLogn)
--------------------------------------------------------
6. Heap Sort
--------------------------------------------------------
7. Quick Sort
--------------------------------------------------------
8. Bucket Sort
--------------------------------------------------------
9. Shell Sort
--------------------------------------------------------
########################################################
GeeksforGeeks - Greedy Algorithms
########################################################

########################################################
GeeksforGeeks - Dynamic Programming
########################################################

########################################################
GeeksforGeeks - Pattern Searching
########################################################

########################################################
GeeksforGeeks - Other String Algorithms
########################################################

########################################################
GeeksforGeeks - Backtracking
########################################################

########################################################
GeeksforGeeks - Divide and Conquer
########################################################

########################################################
GeeksforGeeks - Geometric Algorithms
########################################################

########################################################
GeeksforGeeks - Mathematical Algorithms
########################################################

########################################################
GeeksforGeeks - Bit Algorithms 
########################################################
1. Find the element that appears once
int getSingle(int arr[], int n)
{
    int ones = 0, twos = 0 ;
 
    int common_bit_mask;
 
    // Let us take the example of {3, 3, 2, 3} to understand this
    for( int i=0; i< n; i++ )
    {
        /* The expression "one & arr[i]" gives the bits that are
           there in both 'ones' and new element from arr[].  We
           add these bits to 'twos' using bitwise OR
 
           Value of 'twos' will be set as 0, 3, 3 and 1 after 1st,
           2nd, 3rd and 4th iterations respectively */
        twos  = twos | (ones & arr[i]);
 
 
        /* XOR the new bits with previous 'ones' to get all bits
           appearing odd number of times
 
           Value of 'ones' will be set as 3, 0, 2 and 3 after 1st,
           2nd, 3rd and 4th iterations respectively */
        ones  = ones ^ arr[i];
 
 
        /* The common bits are those bits which appear third time
           So these bits should not be there in both 'ones' and 'twos'.
           common_bit_mask contains all these bits as 0, so that the bits can 
           be removed from 'ones' and 'twos'   
 
           Value of 'common_bit_mask' will be set as 00, 00, 01 and 10
           after 1st, 2nd, 3rd and 4th iterations respectively */
        common_bit_mask = ~(ones & twos);
 
 
        /* Remove common bits (the bits that appear third time) from 'ones'
             
           Value of 'ones' will be set as 3, 0, 0 and 2 after 1st,
           2nd, 3rd and 4th iterations respectively */
        ones &= common_bit_mask;
 
 
        /* Remove common bits (the bits that appear third time) from 'twos'
 
           Value of 'twos' will be set as 0, 3, 1 and 0 after 1st,
           2nd, 3rd and 4th itearations respectively */
        twos &= common_bit_mask;
 
        // uncomment this code to see intermediate values
        //printf (" %d %d \n", ones, twos);
    }
 
    return ones;
}
Time Complexity: O(n)
Auxiliary Space: O(1)
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
########################################################
GeeksforGeeks - Graph Algorithms
########################################################

########################################################
GeeksforGeeks - 
########################################################
########################################################
########################################################
########################################################
