**********************************************************************
                           c
**********************************************************************
01. what is const pointer,pointer to const and const pointer to const
02. memory organisation in c
03. why macro is needed
04. why inline functions are needed
05. macro or inline function which one to use
06. how to declare a variable
07. why function pointer is needed when it can be directly called by
 function name
08. why volatile is needed
09. what is use of const volatile
10. why callback functions 
11. when shared objects and static library are used
12. wild pointer, dangling pointer, weak pointer and strong pointer
13. declare pointer to an array and array of pointers
14. can static variables be included in header file
15. when static variables are stored in data but how the compiler differentiates
when same static variable name is declared in many function with same name
16. 


**********************************************************************
                          c++
**********************************************************************
01. what is data abstraction, inheritance, polymorphism
02. function overloading and function over-riding
03. smart pointers
04. function templates and class templates
05. abstract class
06. virtual functions
07. virtual constructor possible
08. virtual destrcutor possible
09. size of derived class when base class private members
10. copy constructor
11. deep and shallow copy




**********************************************************************
                        data structure
**********************************************************************
--> arrays

--> linked list 
01. find a loop 
02. length of the loop 
03. starting point of the loop
04. find the length of linked list
05. swap two nodes 
06. merge two sorted linked list 
07. detect a loop and remove 
08. reverse a linked list


--> queues

--> stacks

--> binary tree

--> binary search tree

--> graphs




**********************************************************************
                       operating system
**********************************************************************
01. what is zombie process
02. program to demo two process
03. program to demo two threads
04. why is signal handler is needed
05. thread attributes
06. semaphore and mutex
07. interprocess communication
08. program to demo shared memory
09. program to demo pipes
10. program to demo message queues
11. program to demo semaphore and mutex
12. program to demo memory mapped
13. program to demo sockets
14. what is condition variable
15. boot up sequence in linux 
16. different run-levels
17. 


**********************************************************************
                        networking
**********************************************************************
01. What is subnet mask? What is the benefit of subnetting?
02. Write a function which returns the number of devices can be 
connected if the subnet mask is 255.255.255.224
03. You have the following Network ID: 131.112.0.0. You need at least 
500 hosts per network. How many networks can you create? What subnet 
mask will you use?
04. 



**********************************************************************
                         general programs
**********************************************************************
01. reverse a given sentence word by word
02. user defined sizeof function
03. user defined atoi function
04. user defined function convert a string to double precision atof 
05. user defined string copy function
06. Find the element that appears once
07. Detect opposite signs
08. Set bits in all numbers from 1 to n
09. Swap bits
10. Add two numbers
11. Smallest of three
12. A Boolean Array Puzzle
13. Set bits in an (big) array
14. Next higher number with same number of set bits
15. Optimization Technique (Modulus)
16. Add 1 to a number
17. Multiply with 3.5
18. Turn off the rightmost set bit
19. Check for Power of 4
20. Absolute value (abs) without branching
21. Modulus division by a power-of-2-number
22. Minimum or Maximum of two integers 
23. Rotate bits
24. Find the two non-repeating elements in an array
25. Number Occurring Odd Number of Times
26. Check for Integer Overflow
27. Little and Big Endian
28. Reverse Bits of a Number
29. Count set bits in an integer
30. Number of bits to be flipped to convert A to B
31. Next Power of 2
32. Check if a Number is Multiple of 3
33. Find parity
34. Multiply with 7
35. Find whether a no is power of two
36. Position of rightmost set bit
37. Binary representation of a given number
38. Swap all odd and even bits
39. Find position of the only set bit
40. Karatsuba algorithm for fast multiplication
41. How to swap two numbers without using a temporary variable?
42. Check if a number is multiple of 9 using bitwise operators
43. Swap two nibbles in a byte
44. How to turn off a particular bit in a number?
45. Check if binary representation of a number is palindrome


**********************************************************************
                               ims
**********************************************************************
01. call flows
02. mandatory header for sip
03. different types of rtp reports
04. rtp,udp,tcp,http,rtcp,dhcp and tls packet structure
05. architecture of ims



**********************************************************************
                             kernel
**********************************************************************
01. segmentation in hardware and linux
02. paging in hardware and linux
03. process, light weight process and thread
04. process switch
05. interrupt and exception
06. softirqs and tasklets
07. kernel synchronization
08. kernel primitives
09. clock and timer circuits
10. linux time keeping architecture
11. scheduling policy and scheduling algorithms
12. run queue balancing in multi process architecture
13. page frame management
14. memory area management
15. non continguous memory area management
16. page fault and how it is handled
17. page cache
18. page frame reclaiming
19. reverse mapping
20. 


**********************************************************************

**********************************************************************



**********************************************************************

**********************************************************************
