*******************************************************************************
constructors
*******************************************************************************
What is constructor?
A constructor is a member function of a class which initializes objects of a
class. 

How constructors are different from a normal member function?
A constructor is different from normal functions in following ways:
(a) Constructor has same name as the class itself
(b) Constructors don’t have return type
(c) A constructor is automatically called when an object is created.
(d) If we do not specify a constructor, C++ compiler generates a default 
    constructor for us (expects no parameters and has an empty body).

*******************************************************************************
copy constructors
*******************************************************************************
What is a copy constructor?
A copy constructor is a member function which initializes an object using
another object of the same class. A copy constructor has the following general
function prototype:

	ClassName (const ClassName &old_obj); 

When is copy constructor called?
In C++, a Copy Constructor may be called in following cases:
1. When an object of the class is returned by value.
2. When an object of the class is passed (to a function) by value as an 
   argument.
3. When an object is constructed based on another object of the same class.
4. When compiler generates a temporary object.

*******************************************************************************
destructors
*******************************************************************************
What is destructor?
Destructor is a member function which destructs or deletes an object.

When is destructor called?
A destructor function is called automatically when the object goes out of scope:
(1) the function ends
(2) the program ends
(3) a block containing local variables ends
(4) a delete operator is called 

*******************************************************************************
When do we use Initializer List in C++?
*******************************************************************************
Initializer List is used to initialize data members of a class. 

1) For initialization of non-static const data members:
2) For initialization of reference members:
3) For initialization of member objects which do not have default constructor:
4) For initialization of base class members
5) When constructor’s parameter name is same as data member
6) For Performance reasons

*******************************************************************************

*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************
